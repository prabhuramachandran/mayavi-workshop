cells:

- markdown: |
    # VTK/Mayavi Datasets and Filters

    **Prabhu Ramachandran**

    **Department of Aerospace Engineering, IIT Bombay**

    <br/>

  metadata:
    slideshow:
      slide_type: slide

- markdown: |
    ## Illustration of how to view unstructured points

    Let us say you have a random collection of points and scalars associated
    with them but DO NOT know the topology. What do you do?

  metadata:
    slideshow:
      slide_type: slide

- code: |
    # Some random data.
    import numpy as np
    x, y = np.random.random((2, 100))
    s = x*x + y*y
    z = np.ones_like(x)

  id: 0

- markdown: |
    ## Let's visualize it!

  metadata:
    slideshow:
      slide_type: slide

- code: |
    %gui qt
    from mayavi import mlab
    from tvtk.api import tvtk

  id: 1

- code: |
    # If you want a different background!
    fig = mlab.figure(bgcolor=(1,1,1), fgcolor=(0,0,0))

  id: 2

- code: |
    src = mlab.pipeline.scalar_scatter(x, y, z, s)

  id: 3

- code: |
    ug = mlab.pipeline.delaunay2d(src)

  id: 4

- code: |
    surf = mlab.pipeline.surface(ug)
    surf.actor.property.edge_visibility = True

  id: 5

- markdown: |
    ## A low-level way to create the points

  metadata:
    slideshow:
      slide_type: slide

- code: |
    # Doing the same thing  as scalar_scatter in a lower level.
    mlab.clf()
    points = np.c_[x,y,z]
    points.shape
    mesh = tvtk.PolyData(points=points)
    verts = np.arange(len(x), dtype=int)
    verts.shape = 100,1
    mesh.verts = verts
    mesh.point_data.scalars = s
    mesh.point_data.scalars.name = 'temperature'
    mlab.clf()
    src = mlab.pipeline.add_dataset(mesh)

  id: 6

- markdown: |
    ### Example in 3D

  metadata:
    slideshow:
      slide_type: slide

- code: |
    # Some random data.
    import numpy as np
    n = 1000
    x, y, z = np.random.random((3, n))
    s = x*x + y*y + z*z
    mlab.clf()

  id: 7

- code: |
    src = mlab.pipeline.scalar_scatter(x, y, z, s)

  id: 8
  metadata:
    slideshow:
      slide_type: slide

- code: |
    ug = mlab.pipeline.delaunay3d(src)
    iso = mlab.pipeline.iso_surface(ug, contours=8)

  id: 9

- markdown: |
    ## Exercise

    Modify the above 3D example to construct the points in all quadrants, the
    current set of points only lie in the first quadrant since $0 < x,y,z <
    1$.

  metadata:
    slideshow:
      slide_type: slide

- code: |
    # Your code here!

  id: 10

# The lines below here may be deleted if you do not need them.
# ---------------------------------------------------------------------------
metadata:
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
  language_info:
    codemirror_mode:
      name: ipython
      version: 3
    file_extension: .py
    mimetype: text/x-python
    name: python
    nbconvert_exporter: python
    pygments_lexer: ipython3
    version: 3.6.0
nbformat: 4
nbformat_minor: 2

# ---------------------------------------------------------------------------
data:
  [{execution_count: null, outputs: []}, {execution_count: null, outputs: []}, {execution_count: null,
      outputs: []}, {execution_count: null, outputs: []}, {execution_count: null, outputs: []},
    {execution_count: null, outputs: []}, {execution_count: null, outputs: []}, {execution_count: null,
      outputs: []}, {execution_count: null, outputs: []}, {execution_count: null, outputs: []},
    {execution_count: null, outputs: []}]
